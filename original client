/* 
 * user_Interactservert.c - A concurrent user_Interact server using threads
 */
/* $begin user_Interactservertmain */
#include "csapp.h"
#include <stdio.h>
#include <stdbool.h>
#include <time.h>


#define GRID_DRAW_WIDTH 640
#define GRID_DRAW_HEIGHT 640

#define WINDOW_WIDTH GRID_DRAW_WIDTH
#define WINDOW_HEIGHT (HEADER_HEIGHT + GRID_DRAW_HEIGHT)

// Header displays current score
#define HEADER_HEIGHT 50

// Number of cells vertically/horizontally in the grid
#define GRIDSIZE 10

void processInputs(SDL_Event event);
void user_Interact(int connfd);
void *thread(void *vargp);

typedef struct
{
    int x;
    int y;
} Position;

typedef enum
{
    TILE_GRASS,
    TILE_TOMATO,
    TILE_PLAYER
} TILETYPE;

TILETYPE grid[GRIDSIZE][GRIDSIZE];

Position playerPosition;
int score;
int level;
int numTomatoes;

bool shouldExit = false;

double rand01()
{
    return (double) rand() / (double) RAND_MAX;
}



void initGrid() //i think creates all the stuff in a grid like where the tomato should be 
{
    for (int i = 0; i < GRIDSIZE; i++) {
        for (int j = 0; j < GRIDSIZE; j++) {
            double r = rand01();
            if (r < 0.1) {
                grid[i][j] = TILE_TOMATO;
                numTomatoes++;
            }
            else
                grid[i][j] = TILE_GRASS;
        }
    }

    // force player's position to be grass
    if (grid[playerPosition.x][playerPosition.y] == TILE_TOMATO) {
        grid[playerPosition.x][playerPosition.y] = TILE_PLAYER;
        numTomatoes--;
    }

    // ensure grid isn't empty
    while (numTomatoes == 0)
        initGrid();
}

void moveTo(int x, int y)
{
    // Prevent falling off the grid
    if (x < 0 || x >= GRIDSIZE || y < 0 || y >= GRIDSIZE)
        return;

    // Sanity check: player can only move to 4 adjacent squares
    if (!(abs(playerPosition.x - x) == 1 && abs(playerPosition.y - y) == 0) &&
        !(abs(playerPosition.x - x) == 0 && abs(playerPosition.y - y) == 1)) {
        fprintf(stderr, "Invalid move attempted from (%d, %d) to (%d, %d)\n", playerPosition.x, playerPosition.y, x, y);
        return;
    }

    if(grid[x][y] != TILE_PLAYER ){
        grid[playerPosition.x][playerPosition.y] = TILE_GRASS;

        playerPosition.x = x;
        playerPosition.y = y;

        if (grid[x][y] == TILE_TOMATO) {
            grid[x][y] = TILE_PLAYER;
            score++;
            numTomatoes--;
            if (numTomatoes == 0) {
                level++;
                initGrid();
            }
        }
    }
}

void handleKeyDown(SDL_KeyboardEvent* event)
{
    // ignore repeat events if key is held down
    if (event->repeat)
        return;

    if (event->keysym.scancode == SDL_SCANCODE_Q || event->keysym.scancode == SDL_SCANCODE_ESCAPE)
        shouldExit = true;

    if (event->keysym.scancode == SDL_SCANCODE_UP || event->keysym.scancode == SDL_SCANCODE_W)
        moveTo(playerPosition.x, playerPosition.y - 1);

    if (event->keysym.scancode == SDL_SCANCODE_DOWN || event->keysym.scancode == SDL_SCANCODE_S)
        moveTo(playerPosition.x, playerPosition.y + 1);

    if (event->keysym.scancode == SDL_SCANCODE_LEFT || event->keysym.scancode == SDL_SCANCODE_A)
        moveTo(playerPosition.x - 1, playerPosition.y);

    if (event->keysym.scancode == SDL_SCANCODE_RIGHT || event->keysym.scancode == SDL_SCANCODE_D)
        moveTo(playerPosition.x + 1, playerPosition.y);
}

void processInputs(SDL_Event event)
{
	//SDL_Event event;

	while (SDL_PollEvent(&event)) {
		switch (event.type) {
			case SDL_QUIT:
				shouldExit = true;
				break;

            case SDL_KEYDOWN:
                handleKeyDown(&event.key);
				break;

			default:
				break;
		}
	}
}




int main(int argc, char **argv) 
{
    int listenfd, *connfdp;
    socklen_t clientlen;
    struct sockaddr_storage clientaddr;
    pthread_t tid; 

    initGrid();

    if (argc != 2) {
	fprintf(stderr, "usage: %s <port>\n", argv[0]);
	exit(0);
    }
    
    listenfd = Open_listenfd(argv[1]);
    

    while (1) {
        clientlen=sizeof(struct sockaddr_storage);
	    connfdp = Malloc(sizeof(int)); //line:conc:user_Interactservert:beginmalloc
	    *connfdp = Accept(listenfd, (SA *) &clientaddr, &clientlen); //line:conc:user_Interactservert:endmalloc
	    Pthread_create(&tid, NULL, thread, connfdp);
    }
}

/* Thread routine */
void *thread(void *vargp) 
{  
    int connfd = *((int *)vargp);
    Pthread_detach(pthread_self()); //line:conc:user_Interactservert:detach
    Free(vargp);                    //line:conc:user_Interactservert:free
    user_Interact(connfd);
    Close(connfd);
    return NULL;
}
/* $end user_Interactservertmain */
void user_Interact(int connfd) 
{
    //playerPosition.x = playerPosition.y = GRIDSIZE / 2;
    //Position playerPosition;
    playerPosition.x = playerPosition.y = rand()%GRIDSIZE ;
     //makes the initial grid
    
    size_t n; 
    char buf[MAXLINE]; 
    char plrX[20],plrY[20];
    rio_t rio;

    Rio_readinitb(&rio, connfd);

    while((n = Rio_readlineb(&rio, buf, MAXLINE)) != 0) { //line:netp:user_Interact:eof

        //show grid to user
        Rio_writen(connfd, grid, sizeof(int)*GRIDSIZE*GRIDSIZE);
        //show UI data to user
        Rio_writen(connfd, &score, sizeof(int));
        Rio_writen(connfd, &level, sizeof(int));
        //get this users x and y
        Rio_readlineb(&rio, plrX, MAXLINE);
        playerPosition.x = atoi(plrX);
        Rio_readlineb(&rio, plrY, MAXLINE);
        playerPosition.y = atoi(plrY);
        //process the even that we recieved
        processInputs(buf);
        //show grid to user
        Rio_writen(connfd, grid, sizeof(int)*GRIDSIZE*GRIDSIZE); //or write() ?
        //show UI data to user
        Rio_writen(connfd, &score, sizeof(int));
        Rio_writen(connfd, &level, sizeof(int));


        
    }
}

/* $end user_Interact */



